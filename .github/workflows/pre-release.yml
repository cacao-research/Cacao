name: Pre‑release Pipeline

on:
  push:
    branches: [ pre-release ]

permissions:
  contents: write

jobs:
  bump-and-publish:
    runs-on: ubuntu-latest
    steps:

      # 1) Checkout
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Read current VERSION
      - name: Read current version
        id: read_version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

      # 3) Calculate next -rc.N
      - name: Compute next RC version
        id: bump
        shell: bash
        run: |
          # Get current version and strip suffixes
          base_ver=$(echo "$VERSION" | sed 's/\.dev[0-9]*$//' | sed 's/-rc\.[0-9]*$//')

          if [[ "$VERSION" =~ -rc\.([0-9]+)$ ]]; then
              # Increment RC number
              rc_num=$((${BASH_REMATCH[1]} + 1))
          else
              # First RC from dev version
              rc_num=1
          fi

          NEW_VERSION="${base_ver}-rc.${rc_num}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "✔️ Bumping to $NEW_VERSION"

      # 4) Update files in workspace
      - name: Write bumped version
        run: |
          echo "$NEW_VERSION" > VERSION
          sed -i "s|^__version__ = .*|__version__ = \"$NEW_VERSION\"|" cacao/__init__.py

      # 5) (Optional) Commit bump back to branch
      - name: Commit bumped VERSION
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION cacao/__init__.py
          git commit -m "🔖 Bump to $NEW_VERSION [skip ci]" || echo "No changes to commit"
          git push origin pre-release

      # 6) Set up Python & build
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build package
        run: |
          rm -rf dist
          python setup.py sdist bdist_wheel

      # 7) Publish bumped RC to PyPI
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*

      # 8) Create GitHub prerelease
      - name: Create GitHub prerelease
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Pre‑release v${{ env.NEW_VERSION }}
          body: "Pre‑release version v${{ env.NEW_VERSION }}"
          draft: false
          prerelease: true

# .github/workflows/pre-release.yml

name: Preâ€‘release Pipeline

on:
  push:
    branches:
      - pre-release

permissions:
  contents: write

jobs:
  bump-and-publish:
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Bump version (skip if [skip ci] is in the commit)
      - name: Read current version
        id: ver
        run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Compute next RC version
        id: bump
        if: "! contains(github.event.head_commit.message, '[skip ci]')"
        shell: bash
        run: |
          raw="${{ steps.ver.outputs.version }}"
          # strip any .devN suffix (so 1.0.26.dev1 -> 1.0.26)
          base="${raw%%.dev*}"
          IFS='.' read -r maj min patch <<< "$base"
          # detect existing RC
          if [[ "$raw" =~ -rc\.([0-9]+)$ ]]; then
            rc=$((BASH_REMATCH[1] + 1))
          else
            rc=1
          fi
          new="${maj}.${min}.${patch}-rc.${rc}"
          echo "new_version=$new" >> $GITHUB_OUTPUT

      - name: Write new version
        if: steps.bump.outcome == 'success'
        run: |
          echo "${{ steps.bump.outputs.new_version }}" > VERSION
          sed -i "s|^__version__ = .*|__version__ = \"${{ steps.bump.outputs.new_version }}\"|" cacao/__init__.py

      - name: Commit bumped version
        if: steps.bump.outcome == 'success'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION cacao/__init__.py
          git commit -m "ðŸ”– Bump to ${{ steps.bump.outputs.new_version }} [skip ci]"
          git push origin pre-release

      # 3) Get the version (either newly bumped, or old if we skipped)
      - name: Get version for publish
        id: get_version
        run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      # 4) Build & publish
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build distribution
        run: |
          rm -rf dist
          python setup.py sdist bdist_wheel

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*

      - name: Create GitHub prerelease
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Preâ€‘release v${{ steps.get_version.outputs.version }}
          body: "Preâ€‘lease version v${{ steps.get_version.outputs.version }}"
          draft: false
          prerelease: true